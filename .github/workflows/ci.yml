name: CI

on:
  # Triggers when you push to 'main'
  push:
    branches: [main]
  # Triggers when a Pull Request is opened/updated against 'main'
  pull_request:
    branches: [main]

jobs:
  # ---------------------------------------
  # 1) Basic setup job (runs on all events)
  # ---------------------------------------
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

  # ---------------------------------------
  # 2) Frontend checks (runs on all events)
  # ---------------------------------------
  frontend:
    runs-on: ubuntu-latest
    needs: [setup]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Lint and Format Code
        working-directory: ./frontend
        run: npm run lint && npm run format

  # ---------------------------------------
  # 3) Backend checks & Build JAR (runs on all events)
  # ---------------------------------------
  backend:
    runs-on: ubuntu-latest
    needs: [setup]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew

      - name: Run Gradle build
        working-directory: ./backend
        run: ./gradlew build

      - name: Debug list build/libs
        run: ls -l build/libs
        working-directory: ./backend

      # Upload the entire build folder (including build/libs/*.jar)
      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: ./backend/build

  # ---------------------------------------
  # 4) Check if backend code changed
  #    We'll use this job to decide if "deploy" should run
  # ---------------------------------------
  check_changes:
    runs-on: ubuntu-latest
    needs: [backend]  # after we've built the backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Filter changed files
        id: filter
        uses: dorny/paths-filter@v2
        with:
          # Compare against the merge base (default for push) or 'main'
          # so we detect changes to backend/** since last commit on main
          filters: |
            backend:
              - 'backend/**'

      - name: Set output based on backend changes
        id: set-output
        run: |
          if [ "${{ steps.filter.outputs.backend }}" = "true" ]; then
            echo "::set-output name=deploy_needed::true"
          else
            echo "::set-output name=deploy_needed::false"
          fi
        shell: bash

    outputs:
      deploy_needed: ${{ steps.set-output.outputs.deploy_needed }}

  # ---------------------------------------
  # 5) Deployment job (only on push to main, 
  #    AND only if backend folder changed)
  # ---------------------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [check_changes]

    # Only run if:
    # 1) It's a push event on 'main'
    # 2) The check_changes job says that the backend folder changed
    if: >
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      needs.check_changes.outputs.deploy_needed == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Download the build artifacts into the exact same folder structure
      - name: Download Backend Artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: ./backend/build

      - name: Debug list backend/build/libs
        run: ls -l ./backend/build/libs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 \
          | docker login --username AWS --password-stdin 122610519658.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker image
        working-directory: ./backend
        run: docker build -t online-bookshelf-backend:latest .

      - name: Tag and push Docker image to ECR
        run: |
          docker tag online-bookshelf-backend:latest 122610519658.dkr.ecr.us-east-1.amazonaws.com/page-turners:latest
          docker push 122610519658.dkr.ecr.us-east-1.amazonaws.com/page-turners:latest

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster Page-Turners-ClusterX \
            --service page-turners-service \
            --force-new-deployment
